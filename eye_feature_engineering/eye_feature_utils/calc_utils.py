from itertools import combinations

import numpy as np
import pandas as pd


def read_calc_event_into_df(event_file: str, types: [str]) -> pd.DataFrame:
    """
    Function to read in fixation gaze data CSV file generated by Tobii Eye Tracker,
    aggregates fixation events, remove timezone and shift x coordinates
    fixation_file: (str) name of fixation file
    :return: (pd.DataFrame) data loaded into dataframe
    """
    event_df = pd.read_csv(event_file, index_col=0, parse_dates=[0])

    event_df = event_df[event_df["event"].isin(types)]
    event_df["duration"] = event_df["dur"]
    if types == "fixation":
        event_df = event_df[["x", "y", "duration", "event"]]
        event_df['x'] = event_df['x'] - 1920 * 2
    else:
        event_df = event_df[["duration"]]
    # ignore +1 timezone
    event_df = event_df.tz_localize(None)

    return event_df


def calculate_time_delta(gaze_df):
    # actual time
    gaze_df['t'] = gaze_df.index
    # time of previous frame
    gaze_df['t-1'] = gaze_df['t'].shift(periods=1)
    # delta time since last frame
    gaze_df['dt'] = gaze_df['t'] - gaze_df['t-1']  # added column dt
    # convert to seconds
    gaze_df['dt'] = gaze_df['dt'] / np.timedelta64(1, 's')
    # drop old columns t and t-1
    gaze_df = gaze_df.drop(columns=['t', 't-1'])

    return gaze_df


def calculate_delta(df, column_name, delta_name):
    """
    Function to calculate the delta between two timestamps

    df: (pd.DataFrame) data to calculate delta from
    column_name: (str) name of column to calculate delta from
    delta_name: (str) name how to name new column where calculations are saved
    :return: (pd.DataFrame) data with calculated column delta_name
    """
    # actual time
    df['t'] = df[column_name]
    # time of previous frame
    df['t-1'] = df['t'].shift(periods=1)

    # calculate difference
    df[delta_name] = df['t'] - df['t-1']

    # delete temp columns
    df = df.drop(columns=['t', 't-1'])

    return df


def calculate_velocity_and_acceleration(gaze_df, values, data_name=None):
    if data_name is None:
        prefix = ""
    else:
        prefix = "_" + data_name

    value_combinations = []
    for n in range(1, len(values) + 1):
        value_combinations += combinations(values, n)

    for val in values:
        if prefix == "":
            sel_val = val
        else:
            sel_val = prefix[1:] + "_" + val
        d_val = 'd' + prefix + "_" + val
        gaze_df = calculate_delta(gaze_df, column_name=sel_val, delta_name=d_val)

    # vx, vy and velocity v
    for val in values:
        d_val = 'd' + prefix + "_" + val
        v_val = 'v' + prefix + "_" + val
        gaze_df[v_val] = gaze_df[d_val] / gaze_df['dt']

    v_per_value = dict()
    for val in values:
        d_val = 'd' + prefix + "_" + val
        v_per_value[d_val] = gaze_df[d_val] ** 2

    for value_combination in value_combinations:
        v_tmp = None
        v_name_combination = 'v' + prefix
        for val in value_combination:
            d_val = 'd' + prefix + "_" + val
            v_name_combination = v_name_combination + "_" + val
            if v_tmp is None:
                v_tmp = v_per_value[d_val]
            else:
                v_tmp = v_tmp + v_per_value[d_val]

        gaze_df[v_name_combination] = np.sqrt(np.array(v_tmp)) / gaze_df['dt']

    # delta velocities (temporary calculations)
    for val in values:
        dv_val = 'dv' + prefix + "_" + val
        v_val = 'v' + prefix + "_" + val
        gaze_df = calculate_delta(gaze_df, column_name=v_val, delta_name=dv_val)

    for value_combination in value_combinations:
        v_name_combination = 'v' + prefix
        dv_name_combination = 'dv' + prefix
        for val in value_combination:
            v_name_combination = v_name_combination + "_" + val
            dv_name_combination = dv_name_combination + "_" + val

        gaze_df = calculate_delta(gaze_df, column_name=v_name_combination, delta_name=dv_name_combination)

    # acceleration [px/s^2]
    for val in values:
        a_val = 'a' + prefix + "_" + val
        dv_val = 'dv' + prefix + "_" + val
        gaze_df[a_val] = gaze_df[dv_val] / gaze_df['dt']

    for value_combination in value_combinations:
        a_name_combination = 'a' + prefix
        dv_name_combination = 'dv' + prefix
        for val in value_combination:
            a_name_combination = a_name_combination + "_" + val
            dv_name_combination = dv_name_combination + "_" + val

        gaze_df[a_name_combination] = gaze_df[dv_name_combination] / gaze_df['dt']

    # drop delta velocities
    dv_value_combinations_names = []
    for value_combination in value_combinations:
        dv_name_combination = 'dv' + prefix
        for val in value_combination:
            dv_name_combination = dv_name_combination + "_" + val
        dv_value_combinations_names.append(dv_name_combination)
    gaze_df = gaze_df.drop(columns=["dv" + prefix + "_" + val for val in values] + dv_value_combinations_names)

    return gaze_df
